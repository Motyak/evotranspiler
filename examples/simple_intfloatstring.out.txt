#ifndef ENTITE_HPP
#define ENTITE_HPP

#include "Evoluable.hpp"
#include "Redis.hpp"

#include <cereal/types/string.hpp>

struct Entite : public Evoluable, Evoluable::Forme<int,float,std::string>
{
    Entite() = default;
    Entite(const std::variant<int,float,std::string>& formeInitiale) : Evoluable::Forme<int,float,std::string>(formeInitiale){}

    template<class Archive>
    void serialize(Archive& ar) { ar(cereal::base_class<Evoluable::Forme<int,float,std::string>>(this)); }

    bool evolve()
    {
        return std::visit(Evolution {
            [&](int d) -> bool {
                *this = {d + 100.f};
                return true;
            },
            [&](float f) -> bool {
                *this = {"str" + std::to_string(f)};
                return true;
            },
            [](const std::string& str) -> bool {
                std::cout<<"evolution finished : "<<std::string<<std::endl;
                return false;
            }
        }, this->forme);
    }
};
CEREAL_REGISTER_TYPE(Entite);
CEREAL_REGISTER_POLYMORPHIC_RELATION(Evoluable, Entite);

#endif
